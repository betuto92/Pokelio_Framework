<?php
/** 
 *  Bsm_BsmProfileModelGen
 *  A class with basic data manipulation methods for table BsmProfile
 *  This class shouldn't be modified.
 *  
 *  Code generated by Pokelio Codegen Module on Sun, 01 Nov 2015 10:07:20 +0100
 *  
 */ 
class Bsm_BsmProfileModelGen extends Pokelio_MySql_Connector{ 
    /** 
     * Invokes the parent __construct method passing connection id 
     *  
     */ 
     public function __construct() {
         $connName=Pokelio_Global::getConfig("CONNECTION_ID", "Bsm");
         parent::__construct($connName);
     }
    /** 
     * Reads a record identified by $id_profile 
     *  
     * @param integer $id_profile <i>Profile identificator</i>
     *  
     * @return Bsm_BsmProfileEntity 
     *  
     */ 
     public function read($id_profile){
         $sql = "SELECT * 
                 FROM BsmProfile
                 WHERE id_profile = ?";
         $parameters = array($id_profile);
         $result = $this->executeAndFetchAll($sql, $parameters);
         if(sizeof($result)>0){
             $result = $this->arrayToEntity($result[0]);
         }else{
             $result = false;
         }
         return $result;
     }
    /** 
     * Lists records that match fields with value of the entity passed 
     *  
     * @param Bsm_BsmProfileEntity $entity <i>Instance of entity with values</i>
     * @param boolean $rowsResult <i>Result is an array of rows, not an array of entities</i>
     *  
     * @return array 
     */ 
     public function listRecords(Bsm_BsmProfileEntity $entity, $rowsResult=false){
         $parameters = array();
         $sql = "SELECT * 
                 FROM BsmProfile";
         $i=0;
         foreach(get_object_vars($entity) as $key=>$var){
             if($var !== null){
                 $i++;
                 if($i==1){
                     $sql.=" WHERE ".$key." = ?";
                 }else{
                     $sql.=" AND ".$key." = ?";
                 }
                 $parameters[] = $var;
             }
         }
         
         $result = $this->executeAndFetchAll($sql, $parameters);
         if($rowsResult==false){
             foreach($result as $key=>$row){
                 $result[$key] = $this->arrayToEntity($row);
             }
         }
         return $result;
     }
    /** 
     * Calculates the next record identifier 
     *  
     * @return integer 
     *  
     */ 
     private function getNextId(){
         $sql = "SELECT coalesce(max(id_profile),0) + 1 as Id 
                 FROM BsmProfile";
         $result = $this->executeAndFetchAll($sql);
         if(sizeof($result)>0){
             $result = $result[0]['Id'];
         }else{
             $result = false;
         }
         return $result;
     }
    /** 
     * Creates a new record with values of the entity passed 
     *  
     * @param Bsm_BsmProfileEntity $entity <i>Instance of entity with values</i><br />
     * The primary key id_profile is calculated automatically by getNextId() method.
     *  
     */ 
     public function create(Bsm_BsmProfileEntity $entity){
         $parameters = array();
         $sql = "INSERT INTO BsmProfile";
         $sql.= " (id_profile, profile, status)";
         $sql.= " VALUES (?, ?, ?)";
         $parameters[]= self::getNextId();
         $parameters[]= $entity->profile;
         $parameters[]= $entity->status;
         $result = $this->execute($sql, $parameters);
         return $result;
     }
    /** 
     * Updates the record identified by values of the entity passed 
     *  
     * @param Bsm_BsmProfileEntity $entity <i>Instance of entity with values</i>
     *  
     */ 
     public function update(Bsm_BsmProfileEntity $entity){
         $parameters = array();
         $sql = "UPDATE BsmProfile SET ";
         $sql.= "  profile = ?, ";
         $sql.= "  status = ? ";
         $sql.= "WHERE id_profile = ? ";
         $parameters[] = $entity->profile;
         $parameters[] = $entity->status;
         $parameters[] = $entity->id_profile;
         $result = $this->execute($sql, $parameters);
         return $result;
     }
    /** 
     * Deletes the record identified by $id_profile 
     *  
     * @param integer $id_profile <i>Profile identificator</i>
     *  
     */ 
     public function delete($id_profile){
         $sql = "DELETE 
                 FROM BsmProfile
                 WHERE id_profile = ?";
         $parameters = array($id_profile);
         $result = $this->execute($sql, $parameters);
         return $result;
     }
    /** 
     * Converts a PDO array into a Bsm_BsmProfileEntity instance 
     *  
     * @param array $array <i>PDO array</i>
     *  
     * @return Bsm_BsmProfileEntity 
     *  
     */ 
     public function arrayToEntity($array){
         $instance = new Bsm_BsmProfileEntity();
         foreach($array as $key=>$value){ 
             $instance->$key = $value;
         }
         return $instance;
     }
} 

