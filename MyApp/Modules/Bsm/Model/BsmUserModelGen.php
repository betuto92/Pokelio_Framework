<?php
/** 
 *  Bsm_BsmUserModelGen
 *  A class with basic data manipulation methods for table BsmUser
 *  This class shouldn't be modified.
 *  
 *  Code generated by Pokelio Codegen Module on Sat, 31 Oct 2015 23:32:59 +0100
 *  
 */ 
class Bsm_BsmUserModelGen extends Pokelio_MySql_Connector{ 
    /** 
     * Invokes the parent __construct method passing connection id 
     *  
     */ 
     public function __construct() {
         $connName=Pokelio_Global::getConfig("CONNECTION_ID", "Bsm");
         parent::__construct($connName);
     }
    /** 
     * Reads a record identified by $id_user 
     *  
     * @param string $id_user <i>User id, like u001, 88124, ...</i>
     *  
     * @return Bsm_BsmUser_Entity 
     *  
     */ 
     public function read($id_user){
         $sql = "SELECT * 
                 FROM BsmUser
                 WHERE id_user = ?";
         $parameters = array($id_user);
         $result = $this->executeAndFetchAll($sql, $parameters);
         if(sizeof($result)>0){
             $result = $this->arrayToEntity($result[0]);
         }else{
             $result = false;
         }
         return $result;
     }
    /** 
     * Lists records that match fields with value of the entity passed 
     *  
     * @param Bsm_BsmUser_Entity $entity <i>Instance of entity with values</i>
     * @param boolean $rowsResult <i>Result is an array of rows, not an array of entities</i>
     *  
     * @return array 
     */ 
     public function listRecords(Bsm_BsmUser_Entity $entity, $rowsResult=false){
         $parameters = array();
         $sql = "SELECT * 
                 FROM BsmUser";
         $i=0;
         foreach(get_object_vars($entity) as $key=>$var){
             if($var !== null){
                 $i++;
                 if($i==1){
                     $sql.=" WHERE ".$key." = ?";
                 }else{
                     $sql.=" AND ".$key." = ?";
                 }
                 $parameters[] = $var;
             }
         }
         
         $result = $this->executeAndFetchAll($sql, $parameters);
         if($rowsResult==false){
             foreach($result as $key=>$row){
                 $result[$key] = $this->arrayToEntity($row);
             }
         }
         return $result;
     }
    /** 
     * Creates a new record with values of the entity passed 
     *  
     * @param Bsm_BsmUser_Entity $entity <i>Instance of entity with values</i>
     *  
     */ 
     public function create(Bsm_BsmUser_Entity $entity){
         $parameters = array();
         $sql = "INSERT INTO BsmUser";
         $sql.= " (id_user, name, surname, email, password, status, auth_class, auth_method, cli_allowed, web_allowed, ts_created, ts_last_access)";
         $sql.= " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
         $parameters[]= $entity->id_user;
         $parameters[]= $entity->name;
         $parameters[]= $entity->surname;
         $parameters[]= $entity->email;
         $parameters[]= $entity->password;
         $parameters[]= $entity->status;
         $parameters[]= $entity->auth_class;
         $parameters[]= $entity->auth_method;
         $parameters[]= $entity->cli_allowed;
         $parameters[]= $entity->web_allowed;
         $parameters[]= $entity->ts_created;
         $parameters[]= $entity->ts_last_access;
         $result = $this->execute($sql, $parameters);
         return $result;
     }
    /** 
     * Updates the record identified by values of the entity passed 
     *  
     * @param Bsm_BsmUser_Entity $entity <i>Instance of entity with values</i>
     *  
     */ 
     public function update(Bsm_BsmUser_Entity $entity){
         $parameters = array();
         $sql = "UPDATE BsmUser SET ";
         $sql.= "  name = ?, ";
         $sql.= "  surname = ?, ";
         $sql.= "  email = ?, ";
         $sql.= "  password = ?, ";
         $sql.= "  status = ?, ";
         $sql.= "  auth_class = ?, ";
         $sql.= "  auth_method = ?, ";
         $sql.= "  cli_allowed = ?, ";
         $sql.= "  web_allowed = ?, ";
         $sql.= "  ts_created = ?, ";
         $sql.= "  ts_last_access = ? ";
         $sql.= "WHERE id_user = ? ";
         $parameters[] = $entity->name;
         $parameters[] = $entity->surname;
         $parameters[] = $entity->email;
         $parameters[] = $entity->password;
         $parameters[] = $entity->status;
         $parameters[] = $entity->auth_class;
         $parameters[] = $entity->auth_method;
         $parameters[] = $entity->cli_allowed;
         $parameters[] = $entity->web_allowed;
         $parameters[] = $entity->ts_created;
         $parameters[] = $entity->ts_last_access;
         $parameters[] = $entity->id_user;
         $result = $this->execute($sql, $parameters);
         return $result;
     }
    /** 
     * Deletes the record identified by $id_user 
     *  
     * @param string $id_user <i>User id, like u001, 88124, ...</i>
     *  
     */ 
     public function delete($id_user){
         $sql = "DELETE 
                 FROM BsmUser
                 WHERE id_user = ?";
         $parameters = array($id_user);
         $result = $this->execute($sql, $parameters);
         return $result;
     }
    /** 
     * Converts a PDO array into a Bsm_BsmUser_Entity instance 
     *  
     * @param array $array <i>PDO array</i>
     *  
     * @return Bsm_BsmUser_Entity 
     *  
     */ 
     public function arrayToEntity($array){
         $instance = new Bsm_BsmUser_Entity();
         foreach($array as $key=>$value){ 
             $instance->$key = $value;
         }
         return $instance;
     }
} 

class Bsm_BsmUser_Entity { 
    /** 
     * @var string   User id, like u001, 88124, ...<br />
     * <b>Column Type:</b> varchar(12)<br />
     * <b>Nullable:</b> NO<br />
     * <b>Column Key:</b> PRI<br />
     */ 
    public $id_user; 
    /** 
     * @var string   Name of the user<br />
     * <b>Column Type:</b> varchar(60)<br />
     * <b>Nullable:</b> YES<br />
     * <b>Column Key:</b> <br />
     */ 
    public $name; 
    /** 
     * @var string   Surname of the user<br />
     * <b>Column Type:</b> varchar(120)<br />
     * <b>Nullable:</b> NO<br />
     * <b>Column Key:</b> <br />
     */ 
    public $surname; 
    /** 
     * @var string   Email account<br />
     * <b>Column Type:</b> varchar(120)<br />
     * <b>Nullable:</b> YES<br />
     * <b>Column Key:</b> <br />
     */ 
    public $email; 
    /** 
     * @var string   Password hash<br />
     * <b>Column Type:</b> char(40)<br />
     * <b>Nullable:</b> YES<br />
     * <b>Column Key:</b> <br />
     */ 
    public $password; 
    /** 
     * @var string   Status: A-Active, D-Deactivated<br />
     * <b>Column Type:</b> char(1)<br />
     * <b>Nullable:</b> NO<br />
     * <b>Column Key:</b> <br />
     */ 
    public $status; 
    /** 
     * @var string   Class for authentication<br />
     * <b>Column Type:</b> varchar(100)<br />
     * <b>Nullable:</b> YES<br />
     * <b>Column Key:</b> <br />
     */ 
    public $auth_class; 
    /** 
     * @var string   Method os Class for authentication<br />
     * <b>Column Type:</b> varchar(100)<br />
     * <b>Nullable:</b> YES<br />
     * <b>Column Key:</b> <br />
     */ 
    public $auth_method; 
    /** 
     * @var integer  Is the user allowed to use CLI?<br />
     * <b>Column Type:</b> tinyint(1)<br />
     * <b>Nullable:</b> YES<br />
     * <b>Column Key:</b> <br />
     */ 
    public $cli_allowed; 
    /** 
     * @var integer  Is the user allowed to use WEB?<br />
     * <b>Column Type:</b> tinyint(1)<br />
     * <b>Nullable:</b> YES<br />
     * <b>Column Key:</b> <br />
     */ 
    public $web_allowed; 
    /** 
     * @var datetime Timestamp of user creation<br />
     * <b>Column Type:</b> timestamp<br />
     * <b>Nullable:</b> NO<br />
     * <b>Column Key:</b> <br />
     */ 
    public $ts_created; 
    /** 
     * @var datetime Timestamp of user last access<br />
     * <b>Column Type:</b> timestamp<br />
     * <b>Nullable:</b> NO<br />
     * <b>Column Key:</b> <br />
     */ 
    public $ts_last_access; 
} 
