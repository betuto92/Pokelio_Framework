<?php

class Codegen_ModelGen{
    public static function generateModel($module, $table){
        if(!file_exists(APP_MODULES_PATH.'/'.$module)){
            trigger_error("Module $module not found under ".APP_MODULES_PATH);
        }
        if(!is_writable(APP_MODULES_PATH.'/'.$module)){
            trigger_error("Unable to write into module folder [".APP_MODULES_PATH.'/'.$module."]");
        }      
        if(!file_exists(APP_MODULES_PATH.'/'.$module.'/Model')){
            mkdir(APP_MODULES_PATH.'/'.$module.'/Model');
        }
        $modelCode="<?php\n";
        $maxNameLength=0;
        $priKey=array();
        $myModel=new MySQLManager_ObjectsModel();
        $columns=$myModel->listTableColumns($table);
        if(sizeof($columns)==0){
            trigger_error("No table $table found or the table has no column. No code generated.");
        }
        foreach($columns as $column){
            if(strlen($column['COLUMN_NAME'])>$maxNameLength){
                $maxNameLength = strlen($column['COLUMN_NAME']);
            }
            if($column['COLUMN_KEY']=='PRI'){
                $priKey[]=array('name'=>$column['COLUMN_NAME'], 
                                'type'=>self::getPhpType($column['DATA_TYPE']),
                                'extra'=>$column['EXTRA'],
                                'desc'=>$column['COLUMN_COMMENT']);
            }
        }
        if(sizeof($priKey)==0){
            trigger_error("There's no primary key defined for table $table. No code generated.");
        }
        $introCode = self::generateIntro($module, $table);
        $readCode = self::generateReadCode($module, $table, $columns, $maxNameLength, $priKey);
        $getNextCode = self::generateGetNextCode($module, $table, $columns, $maxNameLength, $priKey);
        $constructCode = self::generateConstructCode($module, $table, $columns, $maxNameLength, $priKey);
        $listCode = self::generateListCode($module, $table, $columns, $maxNameLength, $priKey);
        $createCode = self::generateCreateCode($module, $table, $columns, $maxNameLength, $priKey);
        $updateCode = self::generateUpdateCode($module, $table, $columns, $maxNameLength, $priKey);
        $deleteCode = self::generateDeleteCode($module, $table, $columns, $maxNameLength, $priKey);   
        $functionCode = self::generateFunctionCode($module, $table, $columns, $maxNameLength, $priKey);
        
        $modelCode.=$introCode;
        $modelCode.="class ".$module."_".$table."ModelGen extends Pokelio_MySql_Connector{ \n";
        $modelCode.=$constructCode;
        $modelCode.=$readCode;
        $modelCode.=$listCode;
        $modelCode.=$getNextCode;        
        $modelCode.=$createCode;
        $modelCode.=$updateCode;
        $modelCode.=$deleteCode;
        $modelCode.=$functionCode;        
        $modelCode.="} \n\n";
        //Write ModelGen file
        Pokelio_File::writeFile(APP_MODULES_PATH.'/'.$module.'/Model/'.$table.'ModelGen.php',$modelCode);
        //Write Model wrapper file
        self::generateWrapper($module, $table);
        //Write Entity file
        self::generateEntityClass($module, $table, $columns, $maxNameLength);
    } 
    public static function generateWrapper($module, $table){     
        if(!file_exists(APP_MODULES_PATH.'/'.$module.'/Model/'.$table.'Model.php')){
            $wrapperCode="<?php \n";
            $wrapperCode.="require_once '".$table."ModelGen.php';\n";
            $wrapperCode.="/** \n";
            $wrapperCode.=" *  ".$module."_".$table."Model\n";
            $wrapperCode.=" *  A class for wrapping main model class.\n";
            $wrapperCode.=" *  This class can be modified to add new methods.\n";
            $wrapperCode.=" *  \n";
            $wrapperCode.=" *  Code generated by Pokelio Codegen Module on ".date('r')."\n";
            $wrapperCode.=" *  \n";
            $wrapperCode.=" */ \n";            
            $wrapperCode.="class ".$module."_".$table."Model extends ".$module."_".$table."ModelGen{ \n";
            $wrapperCode.="    /**\n";
            $wrapperCode.="     * Invokes the parent __construct \n";
            $wrapperCode.="     *\n";
            $wrapperCode.="     */\n";
            $wrapperCode.="    public function __construct() {\n";
            $wrapperCode.="         parent::__construct();\n";
            $wrapperCode.="     }\n";
            $wrapperCode.="\n";
            $wrapperCode.="    /**\n";
            $wrapperCode.="     * Include your own code below this point. \n";
            $wrapperCode.="     *\n";
            $wrapperCode.="     */\n";
            $wrapperCode.="\n";
            $wrapperCode.="\n";
            $wrapperCode.="\n";
            $wrapperCode.="}\n";

            Pokelio_File::writeFile(APP_MODULES_PATH.'/'.$module.'/Model/'.$table.'Model.php',$wrapperCode);
        }
    } 
    private static function generateIntro($module, $table){
        $intro="";
        $intro.="/** \n";
        $intro.=" *  ".$module."_".$table."ModelGen\n";
        $intro.=" *  A class with basic data manipulation methods for table $table\n";
        $intro.=" *  This class shouldn't be modified.\n";
        $intro.=" *  \n";
        $intro.=" *  Code generated by Pokelio Codegen Module on ".date('r')."\n";
        $intro.=" *  \n";
        $intro.=" */ \n";
        return $intro;
    }    
    private static function generateConstructCode($module, $table, $columns, $maxNameLength, $priKey){
        $code="";
        $code.="    /** \n";
        $code.="     * Invokes the parent __construct method passing connection id \n";
        $code.="     *  \n";
        $code.="     */ \n";
        $code.="     public function __construct() {\n";
        $code.='         $connName=Pokelio_Global::getConfig("CONNECTION_ID", "'.$module.'");'."\n";
        $code.='         parent::__construct($connName);'."\n";
        $code.='     }'."\n";
        
        return $code;
    }
    private static function generateReadCode($module, $table, $columns, $maxNameLength, $priKey){
        $priKeyVars = self::getPrimaryKeyVars($priKey);
        $code="";
        $code.="    /** \n";
        $code.="     * Reads a record identified by ".$priKeyVars." \n";
        $code.="     *  \n";
        foreach($priKey as $column){
            $code.="     * @param ".$column['type']." \$".$column['name']." <i>".$column['desc']."</i>\n";
        }
        $code.="     *  \n";
        $code.="     * @return ".$module."_".$table."Entity \n";
        $code.="     *  \n";
        $code.="     */ \n";
        $code.="     public function read(".$priKeyVars."){\n";
        $code.='         $sql = "SELECT * '."\n";
        $code.='                 FROM '.$table."\n";
        $i=0;
        foreach($priKey as $column){
            $i++;
            if($i==1){
                $code.='                 WHERE '.$column['name']." = ?";
            }else{
                $code.='                   AND '.$column['name']." = ?";
            }
            if($i < sizeof($priKey)){
                $code.="\n";
            }else{
                $code.="\";\n";
            }
        }
        $code.='         $parameters = array('.$priKeyVars.');'."\n";        
        $code.='         $result = $this->executeAndFetchAll($sql, $parameters);'."\n";        
        $code.='         if(sizeof($result)>0){'."\n";        
        $code.='             $result = $this->arrayToEntity($result[0]);'."\n";        
        $code.='         }else{'."\n";        
        $code.='             $result = false;'."\n";        
        $code.='         }'."\n";        
        $code.='         return $result;'."\n";        
        $code.="     }\n";
        return $code;
    }    
    private static function generateGetNextCode($module, $table, $columns, $maxNameLength, $priKey){
        $code="";
        //Generate code?
        $calculated=false;
        $auto=false;
        if(sizeof($priKey)==1 && $priKey[0]['type']=='integer'){
            $calculated=true;
            if(strpos($priKey[0]['extra'],"auto_increment")!==false){
                $auto=true;
            }
        }
        if($calculated==true && $auto==false){
            $code.="    /** \n";
            $code.="     * Calculates the next record identifier \n";
            $code.="     *  \n";
            $code.="     * @return integer \n";
            $code.="     *  \n";
            $code.="     */ \n";
            $code.="     private function getNextId(){\n";
            $code.='         $sql = "SELECT coalesce(max('.$priKey[0]['name'].'),0) + 1 as Id '."\n";
            $code.='                 FROM '.$table."\";\n";
            $code.='         $result = $this->executeAndFetchAll($sql);'."\n";        
            $code.='         if(sizeof($result)>0){'."\n";        
            $code.='             $result = $result[0][\'Id\'];'."\n";        
            $code.='         }else{'."\n";        
            $code.='             $result = false;'."\n";        
            $code.='         }'."\n";        
            $code.='         return $result;'."\n";        
            $code.="     }\n";
        }
        return $code;
    }    
    private static function generateListCode($module, $table, $columns, $maxNameLength, $priKey){
        $code="";
        $code.="    /** \n";
        $code.="     * Lists records that match fields with value of the entity passed \n";
        $code.="     *  \n";
        $code.="     * @param ".$module."_".$table."Entity \$entity <i>Instance of entity with values</i>\n";
        $code.="     * @param boolean \$rowsResult <i>Result is an array of rows, not an array of entities</i>\n";
        $code.="     *  \n";
        $code.="     * @return array \n";     
        $code.="     */ \n";
        $code.="     public function listRecords(".$module."_".$table."Entity \$entity, \$rowsResult=false){\n";
        $code.='         $parameters = array();'."\n";         
        $code.='         $sql = "SELECT * '."\n";
        $code.='                 FROM '.$table."\";\n";
        $code.='         $i=0;'."\n";
        $code.='         foreach(get_object_vars($entity) as $key=>$var){'."\n";        
        $code.='             if($var !== null){'."\n";
        $code.='                 $i++;'."\n";
        $code.='                 if($i==1){'."\n";
        $code.='                     $sql.=" WHERE ".$key." = ?"'.";\n";
        $code.='                 }else{'."\n";
        $code.='                     $sql.=" AND ".$key." = ?"'.";\n";
        $code.='                 }'."\n";
        $code.='                 $parameters[] = $var;'."\n";        
        $code.='             }'."\n";
        $code.='         }'."\n";
        $code.='         '."\n";      
        $code.='         $result = $this->executeAndFetchAll($sql, $parameters);'."\n";        
        $code.='         if($rowsResult==false){'."\n";        
        $code.='             foreach($result as $key=>$row){'."\n";        
        $code.='                 $result[$key] = $this->arrayToEntity($row);'."\n";        
        $code.='             }'."\n";        
        $code.='         }'."\n";        
        $code.='         return $result;'."\n";        
        $code.="     }\n";
        return $code;
    }    
    private static function generateCreateCode($module, $table, $columns, $maxNameLength, $priKey){
        //Decide what to do with primary key
        $calculated=false;
        $auto=false;
        if(sizeof($priKey)==1 && $priKey[0]['type']=='integer'){
            $calculated=true;
            if(strpos($priKey[0]['extra'],"auto_increment")!==false){
                $auto=true;
            }
        }
        //Prepare list of columns and values
        $cols="";
        $vals="";
        foreach($columns as $column){
            //If the key is autoincrement type do not include it in SQL
            if($column['COLUMN_NAME']==$priKey[0]['name']){
                if($auto!=true){
                    $cols.=$column['COLUMN_NAME'].", ";
                    $vals.="?, ";
                }
            }else{
                $cols.=$column['COLUMN_NAME'].", ";
                $vals.="?, ";
            }    
        }
        $cols=substr($cols,0,-2);
        $vals=substr($vals,0,-2);        
        //Write the code
        $code="";
        $code.="    /** \n";
        $code.="     * Creates a new record with values of the entity passed \n";
        $code.="     *  \n";
        $code.="     * @param ".$module."_".$table."Entity \$entity <i>Instance of entity with values</i><br />\n";
        if($calculated==true){
            if($auto==true){
                $code.="     * The primary key ".$priKey[0]['name']." (autoincrement) is calculated automatically by DB Engine\n";
            }else{
                $code.="     * The primary key ".$priKey[0]['name']." is calculated automatically by getNextId() method.\n";
            }
        }
        $code.="     *  \n";
        $code.="     */ \n";
        $code.="     public function create(".$module."_".$table."Entity \$entity){\n";
        $code.='         $parameters = array();'."\n";         
        $code.='         $sql = "INSERT INTO '.$table."\";\n";
        $code.='         $sql.= " ('.$cols.')";'."\n";
        $code.='         $sql.= " VALUES ('.$vals.')";'."\n";
        foreach($columns as $column){
            if($column['COLUMN_NAME']==$priKey[0]['name'] && $calculated==true){
                if($auto==false){
                    $code.='         $parameters[]= self::getNextId();'."\n";
                }    
            }else{
                $code.='         $parameters[]= $entity->'.$column['COLUMN_NAME'].';'."\n";
            }
        }   
        $code.='         $result = $this->execute($sql, $parameters);'."\n";               
        $code.='         return $result;'."\n";        
        $code.="     }\n";
        return $code;
    }    
    private static function generateUpdateCode($module, $table, $columns, $maxNameLength, $priKey){
        $code="";
        $code.="    /** \n";
        $code.="     * Updates the record identified by values of the entity passed \n";
        $code.="     *  \n";
        $code.="     * @param ".$module."_".$table."Entity \$entity <i>Instance of entity with values</i>\n";
        $code.="     *  \n";
        $code.="     */ \n";
        $code.="     public function update(".$module."_".$table."Entity \$entity){\n";
        $code.='         $parameters = array();'."\n";         
        $code.='         $sql = "UPDATE '.$table." SET \";\n";
        $codeWhere="";
        $codeParam1="";
        $codeParam2="";        
        $i=0;
        $j=0;
        foreach($columns as $column){
            if($column['COLUMN_KEY']!='PRI'){
                $j++;
                //if($j < sizeof($columns)){
                    $code.='         $sql.= "  '.$column['COLUMN_NAME'].' = ?, ";'."\n";
                //}else{
                //    $code.='         $sql.= "  '.$column['COLUMN_NAME'].' = ? ";'."\n";
                //}
                $codeParam1.='         $parameters[] = $entity->'.$column['COLUMN_NAME'].';'."\n";
            }else{
                $i++;
                if($i==1){
                    $codeWhere.='         $sql.= "WHERE '.$column['COLUMN_NAME'].' = ? ";'."\n";
                }else{
                    $codeWhere.='         $sql.= "  AND '.$column['COLUMN_NAME'].' = ? ";'."\n";
                }
                $codeParam2.='         $parameters[] = $entity->'.$column['COLUMN_NAME'].';'."\n";
            }     
        }
        //Remove trailing , from $code
        $code=substr($code,0,-5)." \";\n";

        $code.=$codeWhere;
        $code.=$codeParam1;
        $code.=$codeParam2;
        $code.='         $result = $this->execute($sql, $parameters);'."\n";               
        $code.='         return $result;'."\n";        
        $code.="     }\n";
        return $code;
    }    
    private static function generateDeleteCode($module, $table, $columns, $maxNameLength, $priKey){
        $priKeyVars = self::getPrimaryKeyVars($priKey);
        $code="";
        $code.="    /** \n";
        $code.="     * Deletes the record identified by ".$priKeyVars." \n";
        $code.="     *  \n";
        foreach($priKey as $column){
            $code.="     * @param ".$column['type']." \$".$column['name']." <i>".$column['desc']."</i>\n";
        }
        $code.="     *  \n";
        $code.="     */ \n";
        $code.="     public function delete(".$priKeyVars."){\n";
        $code.='         $sql = "DELETE '."\n";
        $code.='                 FROM '.$table."\n";
        $i=0;
        foreach($priKey as $column){
            $i++;
            if($i==1){
                $code.='                 WHERE '.$column['name']." = ?";
            }else{
                $code.='                   AND '.$column['name']." = ?";
            }
            if($i < sizeof($priKey)){
                $code.="\n";
            }else{
                $code.="\";\n";
            }
        }
        $code.='         $parameters = array('.$priKeyVars.');'."\n";        
        $code.='         $result = $this->execute($sql, $parameters);'."\n";              
        $code.='         return $result;'."\n";        
        $code.="     }\n";
        return $code;
    }  
    private static function generateFunctionCode($module, $table, $columns, $maxNameLength, $priKey){
        $code="";
        $code.="    /** \n";
        $code.="     * Converts a PDO array into a ".$module."_".$table."Entity instance \n";
        $code.="     *  \n";
        $code.="     * @param array \$array <i>PDO array</i>\n";
        $code.="     *  \n";
        $code.="     * @return ".$module."_".$table."Entity \n";
        $code.="     *  \n";
        $code.="     */ \n";
        $code.="     public function arrayToEntity(\$array){\n";
        $code.='         $instance = new '.$module.'_'.$table.'Entity();'."\n";
        $code.='         foreach($array as $key=>$value){ '."\n";
        $code.='             $instance->$key = $value;'."\n";
        $code.='         }'."\n";
        $code.='         return $instance;'."\n";
        $code.="     }\n";
        return $code;
    }    
    private static function generateEntityClass($module, $table, $columns, $maxNameLength){
        $entityCode="";
        $entityCode="<?php \n";
        $entityCode.="/** \n";
        $entityCode.=" *  ".$module."_".$table."Entity\n";
        $entityCode.=" *  A class containing mappings of $table table.\n";
        $entityCode.=" *  \n";
        $entityCode.=" *  Code generated by Pokelio Codegen Module on ".date('r')."\n";
        $entityCode.=" *  \n";
        $entityCode.=" */ \n";           
        $entityCode.="class ".$module."_".$table."Entity { \n";
        foreach($columns as $column){
            $entityCode.="    /** \n";
            $phpType=self::getPhpType($column['DATA_TYPE']);
            $entityCode.="     * @var ".str_pad($phpType,8)." ".$column['COLUMN_COMMENT']."<br />"."\n";
            $entityCode.="     * <b>Column Type:</b> ".$column['COLUMN_TYPE']."<br />"."\n";
            $entityCode.="     * <b>Nullable:</b> ".$column['IS_NULLABLE']."<br />"."\n";
            $entityCode.="     * <b>Column Key:</b> ".$column['COLUMN_KEY']."<br />"."\n";
            $entityCode.="     * <b>Extra info:</b> ".$column['EXTRA']."<br />"."\n";
            $entityCode.="     */ \n";
            $entityCode.="    public \$".$column['COLUMN_NAME']."; \n";
        }
        $entityCode.="} \n";  
        Pokelio_File::writeFile(APP_MODULES_PATH.'/'.$module.'/Model/'.$table.'Entity.php',$entityCode);
    }
    private static function getPhpType($mysqlType){
        $types=array();
        $types['bigint']='integer';
        $types['binary']='integer';
        $types['bit']='boolean';
        $types['blob']='string';
        $types['bool']='boolean';
        $types['boolean']='boolean';
        $types['char']='string';
        $types['date']='date';
        $types['datetime']='date';
        $types['decimal']='double';
        $types['double']='double';
        $types['enum']='enum';
        $types['float']='double';
        $types['int']='integer';
        $types['longblob']='string';
        $types['longtext']='string';
        $types['mediumblob']='string';
        $types['mediumint']='integer';
        $types['mediumint']='integer';
        $types['mediumtext']='string';
        $types['numeric']='double';
        $types['real']='double';
        $types['set']='string';
        $types['smallint']='integer';
        $types['text']='string';
        $types['time']='time';
        $types['timestamp']='datetime';
        $types['tinyblob']='string';
        $types['tinyint']='integer';
        $types['tinytext']='string';
        $types['varbinary']='string';
        $types['varchar']='string';
        $types['year']='integer';         
        return $types[$mysqlType];
    }
    private static function getPrimaryKeyVars($priKey){
        $priKeyVars="";
        foreach($priKey as $column){
            $priKeyVars.='$'.$column['name'].", ";
        }
        $priKeyVars=substr($priKeyVars,0,-2);
        return $priKeyVars; 
    }
}

